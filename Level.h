#ifndef LEVEL_H
#define LEVEL_H

#include <iostream>
#include <vector>

#include "window.h"
#include "Brick.h"
#include "Ball.h"
#include "Paddle.h"
#include "Home.h"
#include "Score.h"



class Level {
private:
    size_t m_NbBonus;
    std::vector<Brick> m_TabBrick;
    std::vector<Ball> m_TabBall;
    std::vector<Paddle> m_TabPaddle;
    int m_Score;
    int m_Hp;
    int m_Jump;
    bool isCampaign;
public:
    ////////////////////////////////////////////////////////////
    /// Input : none
    ///
    /// Result : Set the aforesaid boolean
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    void setIsCampaign(bool Boolean);

    ////////////////////////////////////////////////////////////
    /// Input : none
    ///
    /// Result : Return the aforesaid boolean.
    ///
    /// info :
    ////////////////////////////////////////////////////////////

    bool getIsCampaign() const;
    //Builder/Destructor
    ////////////////////////////////////////////////////////////
    /// Input : none
    ///
    /// Result : default constructor
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    Level();
    //Builder/Destructor
    ////////////////////////////////////////////////////////////
    /// Input : level reference
    ///
    /// Result : constructor by copy
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    Level(const Level& L);
    //Accessors
    ////////////////////////////////////////////////////////////
    /// Input : all attribut of Level class
    ///
    /// Result : build a level with parameter
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    Level(size_t NbBonus,std::vector<Brick> TabBrick,std::vector<Ball> TabBall,std::vector<Paddle> TabPaddle,int Score,int Hp,int Jump);
    ////////////////////////////////////////////////////////////
    /// Input : none
    ///
    /// Result : destruct level
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    ~Level();
    ////////////////////////////////////////////////////////////
    /// Input : none
    ///
    /// Result : return m_NbBonus
    ///
    /// info :
    ////////////////////////////////////////////////////////////

    size_t getNbBonus() const;
    ////////////////////////////////////////////////////////////
    /// Input : Number of bonus
    ///
    /// Result : change m_NbBonus
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    void setNbBonus(size_t);

    ////////////////////////////////////////////////////////////
    /// Input : none
    ///
    /// Result : return m_TabBrick
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    std::vector<Brick>& getTabBrick() ;
    ////////////////////////////////////////////////////////////
    /// Input : std::vector<Brick>
    ///
    /// Result : change m_TabBrick
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    void setTabBrick(std::vector<Brick>&);
    ////////////////////////////////////////////////////////////
    /// Input : none
    ///
    /// Result : return m_TabBall
    ///
    /// info :
    ////////////////////////////////////////////////////////////

    std::vector<Ball>& getTabBall();
    ////////////////////////////////////////////////////////////
    /// Input : std::vector<ball>
    ///
    /// Result : change m_TabBall

    void setTabBall(std::vector<Ball>&);
    /// Input : none
    ///
    /// Result : return m_TabPaddle
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    std::vector<Paddle>& getTabPaddle();
    ////////////////////////////////////////////////////////////
    /// Input : std::vector<Paddle>
    ///
    /// Result : change m_TabPaddle
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    void setTabPaddle(std::vector<Paddle>&);
    ////////////////////////////////////////////////////////////
    /// Input : none
    ///
    /// Result : return m_Score
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    int getScore() const;
    ////////////////////////////////////////////////////////////
    /// Input : int
    ///
    /// Result : change m_Score
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    void setScore(int);

    ////////////////////////////////////////////////////////////
    /// Input : none
    ///
    /// Result : return m_Hp
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    int getHp() const;
    ////////////////////////////////////////////////////////////
    /// Input : int
    ///
    /// Result : change m_Hp
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    void setHp(int);

    ////////////////////////////////////////////////////////////
    /// Input : none
    ///
    /// Result : return m_Jump
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    int getJump() const;
    ////////////////////////////////////////////////////////////
    /// Input : int
    ///
    /// Result : change m_Jump
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    void setJump(int);
    //Method
    ////////////////////////////////////////////////////////////
    /// Input : none
    ///
    /// Result : create menu with best score
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    std::vector<playerScore> createMenu();
    //Operator
    ////////////////////////////////////////////////////////////
    /// Input : const level reference
    ///
    /// Result : operator=
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    Level &operator=(const Level& L);

};

#endif /* LEVEL_H */
